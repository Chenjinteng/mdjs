{"version":3,"sources":["mdjs.js"],"names":["escapedHTML","str","replace","ClassMdjsReferManager","render","referMap","footNoteList","this","set","name","content","isFootNote","id","push","url","func","footNoteName","toLowerCase","get","getFootNoteList","ClassMdjsListItemStack","levelStack","typeStack","stackLength","topLevel","topType","level","type","pop","length","ClassMdjsRenderer","tag","hr","br","p","quote","del","strong","em","inlineCode","codeBlock","list","orderList","listItem","toc","tocList","tocItem","footNote","heading","link","uri","title","encodeURI","email","image","altText","table","headContent","bodyContent","tableRow","isHead","cols","align","result","wrapper0","wrapper1","alignValues","i","footNoteLink","refLinkProviders","addRefLinkProvider","provider","_resolveRefLink","referName","ClassMdjs","customRender","analyzeTitleableLink","linkString","trim","ret","match","c1","c2","slice","isCutLine","c","count","howManyWhiteInLeft","lineLeft","j","isThisLineHeaderAndGetLevel","trimedStr","isThereAtLeast2spaceInRight","endsWith","handlerLines","lines","inBq","options","resultMarkdown","linesLength","isThisLineInCodeBlock","currentLine","trimedLine","leftWhiteLength","tbRet","tbFmt","tocPosition","tocTitle","tocLevel","tocLen","isParagraphFinished","tmpStr","tmpStr2","tmpHeaderLevel","l","isThisAListItemAndGetListType","handlerListEnd","startsWith","lang","regex_code_language","cutEnd","titleText","tocMark","handlerInline","regex_delHTML","tagFunc","quoteLines","k","handlerTbLine","handlerTbFmt","tbHead","tbBody","ltab","space","endL","getSpaceString","nextLine","indexOf","alwaysNewline","handlerList","handlerTOC","lastLevel","liHTML","res","search","regex_ol","regex_ul","listItemStack","tStr","col","r","tmp","len","isFmtL","undefined","space1024String","line","start","nextLoc","linkType","linkContent","linkURL","linkTitle","tmpString","tmpNumber","tmpObject","tmpBoolean","rList","lastMean","lastMeanOffset","lastStrong","lastEm","lastDel","lastStType","lastEmType","specialCharacters","regex_url","test","regex_email","hadEmbedImg","done","footRefManager","toFind","titleableLink","join","handlerFoot","forEach","item","md2html","md","String","rawLines","regex_replaceCRLF","split","regex_splitLine","rawLinesLength","part","regex_footRefDefine","object","Array","mdjsInside","MdjsRenderer","Mdjs","module","global","exports","window"],"mappings":"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","file":"mdjs.min.js","sourcesContent":["/**\n * @name MdJs\n * @version 1.0 Developing... 2017/03/03\n * @author LiuYue(hangxingliu)\n * @description Mdjs 是一个轻量级的 Javascript 的 Markdown文件解析器\n */\n(function () {\n\n\t/**\n\t * @description 可以用斜杠转义的字符(0.3加入|转义)\n\t */\n\tvar specialCharacters= \"#`*[]()-_{}+.!|\\\\\";\n\n\t/**\n\t * @description 用于判断Markdown语句的正则表达式\n\t */\n\tvar regex_ul = /^[\\*\\-\\+] +\\S*/g,\n\t\tregex_ol = /^\\d+\\. +\\S*/g,\n\t\tregex_delHTML = /<\\/?[^<>]+>/g,\n\t\tregex_url = /^\\w+:\\/{2,3}\\S+$/g,\n\t\tregex_email = /^[\\w-]+@[\\w-]+\\.[\\w\\.-]+$/g,\n\t\tregex_replaceCRLF = /\\r\\n/g,\n\t\tregex_splitLine = /[\\r\\n]/,\n\t\tregex_footRefDefine = /^\\[([\\^]?)(.+)\\]\\:\\s+(.+)$/,\n\t\tregex_code_language = /\\$language/g;\n\n\t/**\n\t * @description 1024长度的空格字符串\n\t */\n\tvar space1024String = new Array(1024).join(' ');\n\n\t/**\n\t * @description 对一个字符串进行HTML转义(把空格,<,>,\",'转换为)\n\t * @param {String} str 字符串\n\t * @return {String} 转义后的HTML\n\t */\n\tfunction escapedHTML(str) {\n\t\tvar str = str.replace(/&/g, '&gt;');\n\t\treturn str.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/ /g, '&nbsp;').\n\t\t\treplace(/\\'/g, '&#39;').replace(/\\\"/g, '&quot;').replace(/\\n/g, '</br>');\n\t}\n\n\t/**\n\t * @description 参考式 脚注 管理类\n\t * @param {ClassMdjsRenderer} render\n\t */\n\tfunction ClassMdjsReferManager(render) {\n\t\tvar referMap = {},//参考式 脚注 Map映射\n\t\t\tfootNoteList = [];//脚注 数组列表\n\t\t//参考式content为{url:xxx,title:xxx}\n\t\t//脚注content为{url:xxx,title:xxx,id:xxx,content:xxx}\n\t\tthis.set = (name, content, isFootNote) => {\n\t\t\t//如果式脚注就分配ID\n\t\t\tif (isFootNote)\n\t\t\t\tcontent.id = footNoteList.push(content);\n\t\t\tcontent.url = render.func.footNoteName(content.id);\n\t\t\treferMap[name.toLowerCase()] = content;\n\t\t};\n\t\tthis.get = name => referMap[name.toLowerCase()];\n\t\tthis.getFootNoteList = () => footNoteList;\n\t}\n\n\t/**\n\t * @description 用于处理列表项的 栈类\n\t */\t\n\tfunction ClassMdjsListItemStack() {\n\t\tvar levelStack = [],\n\t\t\ttypeStack = [],\n\t\t\tstackLength = 0;\n\t\tthis.topLevel = () => stackLength ? levelStack[stackLength - 1] : -1;\n\t\tthis.topType = () => stackLength ? typeStack[stackLength - 1] : -1;\n\t\tthis.push = (level, type) => {\n\t\t\tlevelStack.push(level);\n\t\t\ttypeStack.push(type);\n\t\t\tstackLength++;\n\t\t};\n\t\tthis.pop = () => {\n\t\t\tlevelStack.pop();\n\t\t\ttypeStack.pop();\n\t\t\tstackLength = levelStack.length;\n\t\t};\n\t}\n\t\n\t/**\n\t * @description 用于渲染Markdown的类\n\t */\n\tfunction ClassMdjsRenderer() {\n\t\t/**\n\t\t * @description 用于渲染的HTML标签\n\t\t */\n\t\tthis.tag = {\n\t\t\thr: '<hr />',\n\t\t\tbr: '<br />',\n\t\t\tp: ['<p>', '</p>'],\n\n\t\t\tquote: ['<blockquote>', '</blockquote>'],\n\t\t\tdel: ['<del>', '</del>'],\n\t\t\tstrong: ['<strong>', '</strong>'],\n\t\t\tem: ['<em>', '</em>'],\n\t\t\tinlineCode: ['<code>', '</code>'],\n\n\t\t\tcodeBlock: ['<pre><code data-lang=\"$language\">', '</code></pre>'],\n\t\t\tlist: ['<ul>', '</ul>'],\n\t\t\torderList: ['<ol>', '</ol>'],\n\t\t\tlistItem: ['<li>', '</li>'],\n\n\t\t\ttoc: ['<div class=\"md_toc\">', '</div>'],\n\t\t\ttocList: ['<ol>','</ol>'],\n\t\t\ttocItem: ['<a href=\"#$uri\"><li>', '</li></a>'],\n\t\t\tfootNote: ['<div class=\"md_foot\"><ol>', '</ol></div>'],\n\t\t};\n\t\t/**\n\t\t * @description 用于渲染的HTML生成函数\n\t\t */\n\t\tthis.func = {\n\t\t\theading: (level, name, content) =>\n\t\t\t`<h${level} id=\"${name}\" name=\"${name}\">${content}</h${level}>`,\n\t\t\tlink: (uri, title, content) =>\n\t\t\t\t`<a title=\"${escapedHTML(title)}\" href=\"${encodeURI(uri)}\">${content}</a>`,\n\t\t\temail: email => `<a href=\"mailto:${email}\">${email}</a>`,\n\t\t\timage: (uri, title, altText) =>\n\t\t\t\t`<img alt=\"${escapedHTML(altText)}\" title=\"${escapedHTML(title)}\" src=\"${encodeURI(uri)}\" />`,\n\t\t\t\n\t\t\ttable: (headContent, bodyContent) => \n\t\t\t\t`<table class=\"md_table\"><thead>${headContent}</thead><tbody>${bodyContent}</tbody></table>`,\n\t\t\ttableRow: (isHead, cols, align) => {\n\t\t\t\tvar result = '<tr>',\n\t\t\t\t\twrapper0 = isHead ? '<th style=\"text-align: {0}\">' : '<td style=\"text-align: {0}\">',\n\t\t\t\t\twrapper1 = isHead ? '</th>' : '</td>',\n\t\t\t\t\talignValues = ['left', 'center', 'right'];\n\t\t\t\tfor (var i = 0; i < cols.length; i++)\n\t\t\t\t\tresult += wrapper0.replace('{0}', alignValues[align[i]]) + cols[i] + wrapper1;\n\t\t\t\treturn result + '</tr>'\n\t\t\t},\n\n\t\t\tfootNoteLink: (uri, title, content) =>\n\t\t\t\t`<sup><a title=\"${escapedHTML(title)}\" href=\"#${encodeURI(uri)}\">${content}</a></sup>`,\n\t\t\tfootNote: (name, content) => `<li name=\"${name}\" id=\"${name}\">${content}</li>`,\n\t\t\tfootNoteName: id => `markdown_foot_${id}`\n\t\t};\n\t\t\n\t\t/**\n\t\t * @description 参考式提供器\n\t\t */\n\t\tvar refLinkProviders = [];\n\t\t/**\n\t\t * @description 添加参考式提供器\n\t\t */\n\t\tthis.addRefLinkProvider = provider => refLinkProviders.push(provider);\n\t\t/**\n\t\t * @description 解析参考式\n\t\t */\n\t\tthis._resolveRefLink = referName => {\n\t\t\tfor(var i = 0, result; i < refLinkProviders.length ; i++ )\n\t\t\t\tif (result = refLinkProviders[i](referName))\n\t\t\t\t\treturn result.url ? result : { url: result };\n\t\t};\n\t}\n\n\t/**\n\t * 创建一个Markdown解析器的类\n\t * @param {Object} [customRender] 自定义的Markdown渲染器 \n\t */\n\tfunction ClassMdjs(customRender) {\n\t\t//Markdown内容渲染器\n\t\tvar render = new ClassMdjsRenderer();\n\t\tif (customRender) render = customRender;\n\t\t//用于 Markdown 渲染的 HTML 标签\n\t\tvar tag = render.tag;\n\t\t//用于 Markdown 渲染的 HTML 生成函数\n\t\tvar tagFunc = render.func;\n\n\t\t//参考式 脚标 管理器\n\t\tvar footRefManager = new ClassMdjsReferManager(render);\n\t\tvar listItemStack = new ClassMdjsListItemStack();\n\t\tthis.render = render;\n\n\t\t/**\n\t\t * @description 将一个 Markdown 文本解析为可显示的HTML\n\t\t * @param {String} md Markdown文本\n\t\t * @param {MdjsParseOptions|Object} options 解析选项\n\t\t * @return {String} HTML\n\t\t */\n\t\tthis.md2html = function (md, options) {\n\t\t\t//处理默认参数\n\t\t\toptions = options || {};\n\t\t\tmd = typeof md == 'string' ? md : String(md);\n\t\t\t\n\t\t\t//初始化参考式管理器\n\t\t\tfootRefManager = new ClassMdjsReferManager(render);\n\t\t\t//初始化列表元素栈\n\t\t\tlistItemStack = new ClassMdjsListItemStack();\n\n\t\t\t//原始行\n\t\t\tvar rawLines = md.replace(regex_replaceCRLF, '\\n').split(regex_splitLine),\n\t\t\t\trawLinesLength = rawLines.length;\n\t\t\t//去掉了参考式的行\n\t\t\tvar lines = [], line = '';\n\n\t\t\t//寻找参考式\n\t\t\tfor (var i = 0; i < rawLinesLength; i++){\n\t\t\t\tline = rawLines[i];\n\t\t\t\tvar part = line.trim().match(regex_footRefDefine);\n\t\t\t\t//不是脚标获得参考式 行\n\t\t\t\tif (!part) {\n\t\t\t\t\tlines.push(line);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvar object, isFootNote = false, content = '';\n\t\t\t\tif (isFootNote = (part[1] == '^')) { //如果是脚注\n\t\t\t\t\tcontent = part[3];\n\t\t\t\t\t//查找接下来的行是否仍然属于该脚注内容\n\t\t\t\t\tfor (var k = i + 1; k < rawLinesLength; k++ , i++) {\n\t\t\t\t\t\tline = rawLines[k].trim();\n\t\t\t\t\t\tif (!line) break;//空白行\n\t\t\t\t\t\tif (line.match(regex_footRefDefine)) break;//下一个脚注或参考式\n\t\t\t\t\t\tcontent += '\\n' + rawLines[k];\n\t\t\t\t\t}\n\t\t\t\t\tobject = { title: part[2], content: content }\n\t\t\t\t}else{ //参考式\n\t\t\t\t\tobject = analyzeTitleableLink(part[3].trim());\n\t\t\t\t}\n\t\t\t\tfootRefManager.set(part[1] + part[2], object, isFootNote);\n\t\t\t}\n\t\t\t\n\t\t\treturn handlerLines(lines, false, options) + handlerFoot(); //内容最后如果有脚注就输出脚注内容\n\t\t}\n\n\t\t/**\n\t\t * @description 从一个可以带标题的链接字符串中出链接地址和链接标题\n\t\t * @param {String} linkString 链接字符串,例如: http://xxx.xx \"Title\"\n\t\t * @return {Object} 包含 url 属性和 title 属性的对象\n\t\t */\n\t\tfunction analyzeTitleableLink(linkString){\n\t\t\tlinkString = linkString.trim();\n\t\t\tvar ret = { url: linkString, title: '' };\n\t\t\tvar match = linkString.match(/(.+?)\\s+(.+)/);\n\t\t\t//如果无法匹配表示这个字符串只有链接 没有标题\n\t\t\tif (!match) return ret;\n\t\t\tret.url = match[1];\n\t\t\t//去掉链接标题的包裹符号\n\t\t\tvar title = match[2], c1 = title[0], c2 = title[title-1];\n\t\t\tif (title.length >= 2)\n\t\t\t\tif ( ((c1 == '\\'' || c1 == '\"') && c1 == c2) ||\n\t\t\t\t\t\t(c1 == '(' && c2 == ')') )\t\n\t\t\t\t\ttitle = title.slice(1, -1);\n\t\t\tret.title = title;\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * @description 判断一句语句是否为一条水平分割线,即三个及以上的=_-* 并且没有别的非空白字符\n\t\t * @param {String} str Markdown一句字符串\n\t\t */\n\t\tfunction isCutLine(str) {\n\t\t\tvar c = str[0];\n\t\t\tif (c != '=' && c != '-' && c != '_' && c != '*') return false;\n\t\t\tfor (var i = 0, count = 0; i < str.length; i++){\n\t\t\t\tif (str[i] == ' ' || str[i] == '\\t') continue;\n\t\t\t\tif (str[i] != c) return false;\n\t\t\t\tcount++;\n\t\t\t\t//if(count==3)break; Fix Bug 如果是这样的一句:如果一句***后面还有内容就当成正常语句输出\n\t\t\t}\n\t\t\treturn count >= 3;\n\t\t}\n\n\t\t/**\n\t\t * @description 获得一行语句前面的空白字符(空格,Tab)数,Tab算四个\n\t\t * @param {String} str 语句\n\t\t * @return {Number} 语句前的空白字符的数量\n\t\t */\n\t\tfunction howManyWhiteInLeft(str) {\n\t\t\tvar lineLeft=0;\n\t\t\tfor (var j = 0; j < str.length; j++){\n\t\t\t\tif(str[j]==' ')lineLeft++;\n\t\t\t\telse if(str[j]=='\\t')lineLeft+=4;\n\t\t\t\telse break;\n\t\t\t}\n\t\t\treturn lineLeft;\n\t\t}\n\n\t\t/**\n\t\t * @description 判断这行markdown是否为标题行, 如果是则返回标题的层级数(1-8), 否则返回false\n\t\t * @param {String} trimedStr 一个已经执行了trim的字符串\n\t\t * @returns {Boolean|Number}\n\t\t */\t\t\n\t\tfunction isThisLineHeaderAndGetLevel(trimedStr) {\n\t\t\tfor (var j = 0; j < trimedStr.length; j++)\t\n\t\t\t\tif (trimedStr[j] != '#')\t\n\t\t\t\t\tbreak;\n\t\t\treturn j ? j : false;\n\t\t}\n\t\t\n\t\t/**\n\t\t * @description 一句字符串右侧是否有至少2个空格字符(表示需要换一个新的行)\n\t\t * @param {String} str 一句字符串\n\t\t * @returns {Boolean}\n\t\t */\n\t\tfunction isThereAtLeast2spaceInRight(str) {\n\t\t\treturn str.endsWith('  ');\n\t\t}\n\n\t\t/**\n\t\t * @description 将多个 Markdown 语句解析成可显示的HTML\n\t\t * \n\t\t * @param {Array<String>} lines 多行Markdown语句组成的数组\n\t\t * @param {Boolean} inBq (可选,默认false)解析的是否为Blockquote内的内容\n\t\t * @param {MdjsParseOptions|Object} options 解析选项\n\t\t * @return {string} HTML\n\t\t */\n\t\tfunction handlerLines(lines,inBq, options){\n\t\t\tvar resultMarkdown = '';\n\n\t\t\tvar linesLength = lines.length; // markdown行数\n\t\t\t\n\t\t\tvar isThisLineInCodeBlock = 0;//目前处理的这行是不是代码,大于等于1就是\n\t\t\t\n\t\t\tvar currentLine = '';//目前循环正在处理着的行\n\t\t\tvar trimedLine = '';//目前行去掉两端空白字符后的字符串\n\n\t\t\tvar leftWhiteLength = 0;//当前行左端的空格字符数量,//1个Tab=4个空格\n\t\t\t\n\t\t\tvar tbRet = [];//存放表格行解析出来的列数组\n\t\t\tvar tbFmt = [];//存放表格每列的对齐格式\n\t\t\t\n\t\t\tvar tocPosition = -1;//哪儿要输出目录结构\n\t\t\tvar tocTitle = [];//记录目录每个节点的标题\n\t\t\tvar tocLevel = [];//记录目录每个节点的层次\n\t\t\tvar tocLen = 0;//记录目录一共有多少个节点\n\t\t\t\n\t\t\tvar isParagraphFinished = true;//文本段落是否已经结束, 是否已经插入过了</p>\n\n\t\t\tvar tmpStr = '', tmpStr2 = '';\n\t\t\tvar tmpHeaderLevel = 0;\n\n\t\t\tfor (var i = 0; i < linesLength; i++){\n\n\t\t\t\tcurrentLine = lines[i];\t\t\t\t\n\t\t\t\ttrimedLine = currentLine.trim();\n\t\t\t\t\n\t\t\t\t//目前正在处理代码,或者代码结尾\n\t\t\t\tif(isThisLineInCodeBlock){\n\t\t\t\t\tif(trimedLine=='```'){//代码结束了\n\t\t\t\t\t\tisThisLineInCodeBlock = false;\n\t\t\t\t\t\tresultMarkdown += tag.codeBlock[1];\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tresultMarkdown += (isThisLineInCodeBlock ? '\\n' : '') + escapedHTML(lines[i]);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//计算行前空格数\n\t\t\t\tleftWhiteLength = howManyWhiteInLeft(currentLine);\n\t\t\t\t\n\t\t\t\t//列表行\n\t\t\t\tvar l = isThisAListItemAndGetListType(trimedLine);\n\t\t\t\tif(l!=0){\n\t\t\t\t\tresultMarkdown += handlerList(leftWhiteLength,l,trimedLine);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tresultMarkdown+= handlerListEnd();\n\t\t\t\t\n\t\t\t\t//空白行\n\t\t\t\tif (trimedLine.length == 0) {\n\t\t\t\t\t//如果段落还没有结束了, 就结束当前段落然后输出</p>\n\t\t\t\t\tif (!isParagraphFinished) {\n\t\t\t\t\t\tresultMarkdown += tag.p[1];\n\t\t\t\t\t\tisParagraphFinished = true;\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//没有Tab键在行前\n\t\t\t\tif (leftWhiteLength < 4) {\n\t\t\t\t\tif (trimedLine.startsWith('```')) {//进入代码块\n\t\t\t\t\t\tvar lang = trimedLine.slice(3).trim();\n\t\t\t\t\t\tresultMarkdown += tag.codeBlock[0].replace(regex_code_language, lang);\n\t\t\t\t\t\tisThisLineInCodeBlock = true;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//是标题吗?多少个标题\n\t\t\t\t\ttmpHeaderLevel = isThisLineHeaderAndGetLevel(trimedLine);\n\t\t\t\t\t//是标题\n\t\t\t\t\tif (tmpHeaderLevel != 0) {\n\t\t\t\t\t\tvar cutEnd = trimedLine.length - 1; //标题内容的结尾位置\n\t\t\t\t\t\tfor (; cutEnd > tmpHeaderLevel; cutEnd--)\n\t\t\t\t\t\t\tif (trimedLine[cutEnd] != '#') //为了去掉结尾的#号\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tvar titleText = trimedLine.slice(tmpHeaderLevel, cutEnd + 1);\n\t\t\t\t\t\t//tocMark 给当前标题标记的 ID 和 name,为了能让TOC目录点击跳转\n\t\t\t\t\t\tvar tocMark = titleText = handlerInline(titleText, 0);\n\t\t\t\t\t\ttocLevel[tocLen] = tmpHeaderLevel;\n\t\t\t\t\t\ttocTitle[tocLen++] = tocMark = tocMark.trim().replace(regex_delHTML, '');\n\t\t\t\t\t\tresultMarkdown += tagFunc.heading(tmpHeaderLevel, tocMark, titleText);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//是引用区块 >\n\t\t\t\t\tif (trimedLine[0] == '>' && trimedLine.length > 1) {\n\t\t\t\t\t\tvar quoteLines = [];//存放需要区块引用的行\n\t\t\t\t\t\tfor (var k = i; k < linesLength; k++){\n\t\t\t\t\t\t\ttmpStr = lines[k].trim();\n\t\t\t\t\t\t\tif (tmpStr.length == 0)\n\t\t\t\t\t\t\t\tbreak;//不是引用区块的内容了\n\t\t\t\t\t\t\tif (tmpStr[0] == '>')\n\t\t\t\t\t\t\t\ttmpStr = tmpStr.slice(1) + (isThereAtLeast2spaceInRight(lines[k]) ? '  ' : '');\n\t\t\t\t\t\t\t\t//检查一下每行末尾是否有需要换行的空格留出, 如果有请保留, 防止被合并到一行内\n\t\t\t\t\t\t\telse if (inBq)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t//如果是区块引用嵌入区块引用,并且没有>符号就返回上一层区块引用\n\t\t\t\t\t\t\t\t//如果不按上面那行做,会导致区块引用嵌套时结尾一定会有一行无法去掉的空白\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\ttmpStr = lines[k];\n\t\t\t\t\t\t\t\t//如果没有 > 开头的话就保留原来的字符串(防止丢失行首的空格)\n\t\t\t\t\t\t\tquoteLines.push(tmpStr);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresultMarkdown += tag.quote[0] + handlerLines(quoteLines, true, options) + tag.quote[1];\n\t\t\t\t\t\ti = k - 1;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t//横线\n\t\t\t\t\tif (isCutLine(trimedLine)) { resultMarkdown += tag.hr; continue; }\n\t\t\t\t\t\n\t\t\t\t\t//目录\n\t\t\t\t\t//记录当前位置, 在全部文档解析完后输出到这个位置\n\t\t\t\t\tif (trimedLine == '[TOC]') { tocPosition = resultMarkdown.length; continue; }\n\t\t\t\t\t\n\t\t\t\t\t//表格\n\t\t\t\t\tif ((tbRet = handlerTbLine(trimedLine)) != false) { //可能是表格\n\t\t\t\t\t\t//两行表格语句确定表格结构\n\t\t\t\t\t\tif (i < linesLength - 1 && (tbFmt = handlerTbFmt(lines[i + 1].trim(), tbRet.length)) != false) {\n\t\t\t\t\t\t\t//表格头部\n\t\t\t\t\t\t\tvar tbHead = tagFunc.tableRow(true, tbRet, tbFmt);\n\t\t\t\t\t\t\tvar tbBody = '';\n\t\t\t\t\t\t\tfor (var j = i + 2; j < linesLength; j++) {\n\t\t\t\t\t\t\t\tif ((tbRet = handlerTbLine(lines[j].trim())) == false) break; //不是表格语句了\n\t\t\t\t\t\t\t\ttbBody += tagFunc.tableRow(false, tbRet, tbFmt);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti = j - 1;\n\t\t\t\t\t\t\tresultMarkdown += tagFunc.table(tbHead, tbBody);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\t//虽然空格数大于了4,但是还是有可能:\n\t\t\t\t\t//代码块(需要检查上一行),普通文本\n\t\t\t\t\t//代码块\n\t\t\t\t\tif(i==0 || lines[i-1].trim().length == 0){\n\t\t\t\t\t\tresultMarkdown += tag.codeBlock[0].replace(regex_code_language, '');\n\t\t\t\t\t\tvar space = '',endL = i;//space是为了中间的空白行,endl是为了保存代码最后有效行在哪\n\t\t\t\t\t\tfor(var j=i,ltab;j<linesLength;j++){\n\t\t\t\t\t\t\tif(lines[j].trim().length==0){space+='\\n';continue;}//空白行,记入space,这样做是为了如果代码块最后有空行而不输出\n\t\t\t\t\t\t\tif((ltab = howManyWhiteInLeft(lines[j]))<4)break;//空白小于一个Tab键了,退出代码块\n\t\t\t\t\t\t\tresultMarkdown += space + (j == i ? '' : '\\n') + getSpaceString(ltab - 2) +//去掉开头多余的空白字符\n\t\t\t\t\t\t\t\tescapedHTML(lines[j].trim());\n\t\t\t\t\t\t\tspace='',endL = j;//重置空白行和记录最后有效行\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresultMarkdown += tag.codeBlock[1];\n\t\t\t\t\t\ti=endL;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//普通文本正常的一行\n\t\t\t\t//真的是上面注释的那样吗?其实如果它的下一行是---或===的话,那这一行就是标题行了\n\t\t\t\tif (i + 1 < linesLength) {\n\t\t\t\t\tvar nextLine = lines[i+1].trim();\n\t\t\t\t\tif (isCutLine(nextLine)) {//真的也,这行是标题\n\t\t\t\t\t\tvar level = 3;//默认三级\n\t\t\t\t\t\tif (nextLine[0] == '=') level = 1;\n\t\t\t\t\t\telse if (nextLine[0] == '-') level = 2;\n\t\t\t\t\t\tvar tocMark = titleText = handlerInline(trimedLine,0);\n\t\t\t\t\t\ttocLevel[tocLen]  = level;\n\t\t\t\t\t\ttocTitle[tocLen++]= tocMark = tocMark.trim().replace(regex_delHTML,'');\n\t\t\t\t\t\tresultMarkdown += tagFunc.heading(level, tocMark, titleText);\n\t\t\t\t\t\ti++;//跳过下一行\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//这下真的是普通的一行了\n\t\t\t\ttmpStr = handlerInline(currentLine, 0);\n\t\t\t\ttmpStr2 = tmpStr.trim();\n\n\t\t\t\t//判断当行是否有且只有一个图片标签, 且在段落外. 如果是, 则优化输出. 不将这个图片包裹在一个新的段落(<p></p>)内\n\t\t\t\tif (isParagraphFinished &&\n\t\t\t\t\ttmpStr2.startsWith('<img ') &&\n\t\t\t\t\ttmpStr2.endsWith('/>') &&\n\t\t\t\t\ttmpStr2.indexOf('<img ', 1) == -1) {\n\t\t\t\t\tresultMarkdown += tmpStr;\n\t\t\t\t} else {\n\t\t\t\t\t//新的段落开始<p>\n\t\t\t\t\tif (isParagraphFinished)\n\t\t\t\t\t\ttmpStr = tag.p[0] + tmpStr;\n\t\t\t\t\t//如果解析选项要求强制换行 或 改行末尾含有至少两个空格要求(换行)\n\t\t\t\t\tif (options.alwaysNewline ||\n\t\t\t\t\t\tisThereAtLeast2spaceInRight(currentLine))\n\t\t\t\t\t\ttmpStr += tag.br;\n\t\t\t\t\tresultMarkdown += tmpStr;\n\t\t\t\t\tisParagraphFinished = false;\n\t\t\t\t}\n\n\t\t\t\t//循环结束,一行处理完成\n\t\t\t}\n\n\t\t\t//如果需要输出TOC目录\n\t\t\tif (tocPosition != -1)\t\n\t\t\t\tresultMarkdown = resultMarkdown.slice(0, tocPosition) +\n\t\t\t\t\thandlerTOC(tocTitle, tocLevel, tocLen) +\n\t\t\t\t\tresultMarkdown.slice(tocPosition);\n\t\t\t\n\t\t\treturn resultMarkdown;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 生成一个TOC目录的代码\n\t\t * @param {Array<String>} tocTitle 目录节点的标题\n\t\t * @param {Array<Number>} tocLevel 目录节点的层次\n\t\t * @return {String} TOC 目录的HTML代码\n\t\t */\n\t\tfunction handlerTOC(tocTitle, tocLevel) {\n\t\t\tvar res = tag.toc[0];\n\t\t\tvar levelStack = [], lastLevel;\n\t\t\tvar liHTML;\n\t\t\tfor (var i = 0; i < tocTitle.length; i++) {\n\t\t\t\tliHTML = tag.tocItem[0].replace('$uri', tocTitle[i]) + tocTitle[i] + tag.tocItem[1];\n\t\t\t\tif (levelStack.length == 0 || tocLevel[i] > lastLevel) {\n\t\t\t\t\tres += tag.tocList[0] + liHTML;\n\t\t\t\t\tlevelStack.push(lastLevel = tocLevel[i]);\n\t\t\t\t} else if (tocLevel[i] == lastLevel) {\n\t\t\t\t\tres += liHTML;\n\t\t\t\t} else {\n\t\t\t\t\tres += tag.tocList[1];\n\t\t\t\t\tlevelStack.pop();\n\t\t\t\t\tlastLevel = levelStack[levelStack.length - 1];\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (levelStack.length) res += tag.tocList[1], levelStack.pop();\n\t\t\treturn res + tag.toc[1];\n\t\t}\n\n\t\t/**\n\t\t * @description 判断此句是否为列表语句\n\t\t * @param {String} str Markdown语句\n\t\t * @return {Number} 0:不是列表,1:数字列表ol,2:无序列表ul\n\t\t */\n\t\tfunction isThisAListItemAndGetListType(str) {\n\t\t\tif (isCutLine((str))) return 0;\n\t\t\tif(str.search(regex_ol)!=-1)return 1;\n\t\t\tif(str.search(regex_ul)!=-1)return 2;\n\t\t\treturn 0;\n\t\t}\n\t\t\t\n\t\t/**\n\t\t * @description 处理一行Markdown列表语句\n\t\t * @param {Object} level 列表语句前面有多少个空格/列表的层次\n\t\t * @param {Number} type 哪一种列表(1:数字列表,2:无序列表)\n\t\t * @param {Object} str Markdown语句\n\t\t * @return {String} 此句 Markdown 的 HTML\n\t\t */\n\t\tfunction handlerList(level, type, str) {\n\t\t\tvar topLevel = listItemStack.topLevel();//上一个列表的层次\n\t\t\tvar liHTML = tag.listItem[0] + handlerInline(str, str.indexOf(' '), 0) + tag.listItem[1];\n\t\t\tvar res = '';\n\t\t\tif(level > topLevel){//上一个列表的___子列表___\n\t\t\t\tlistItemStack.push(level,type);\n\t\t\t\treturn (type == 1 ? tag.orderList : tag.list)[0] + liHTML;\n\t\t\t}else if(level == topLevel){//上一个列表的___兄弟(并列)列表___\n\t\t\t\treturn liHTML;\n\t\t\t}else{//上一个列表的___父列表___的___兄弟列表___\n\t\t\t\twhile(level<topLevel){//找到属于这个列表的兄弟列表\n\t\t\t\t\tif (listItemStack.topType() == 1)//数字列表\t\n\t\t\t\t\t\tres += tag.orderList[1];\n\t\t\t\t\telse//无序列表\n\t\t\t\t\t\tres += tag.list[1];\n\t\t\t\t\tlistItemStack.pop();\n\t\t\t\t\ttopLevel = listItemStack.topLevel();\n\t\t\t\t}\n\t\t\t\tif(topLevel==-1){//这个列表是最顶层的列表,即暂时没有兄弟列表,是一个新的列表集的开始\n\t\t\t\t\tlistItemStack.push(level,type);\n\t\t\t\t\treturn res + (type == 1 ? tag.orderList : tag.list)[0] + liHTML;\n\t\t\t\t}else{\n\t\t\t\t\treturn res + liHTML;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @description 在处理多个Markdown语句时检测之前是不是还有列表没有结尾\n\t\t * @returns {String} ,如果还有列表没有结尾,则返回列表结尾;反之,返回空白字符串\n\t\t */\n\t\tfunction handlerListEnd(){\n\t\t\tvar res = '';\n\t\t\twhile(listItemStack.topLevel()!=-1){\n\t\t\t\tif (listItemStack.topType() == 1)//数字列表\t\n\t\t\t\t\tres += tag.orderList[1];\n\t\t\t\telse//无序列表\n\t\t\t\t\tres += tag.list[1];\n\t\t\t\tlistItemStack.pop();\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\n\t\t/**\n\t\t * @description 解析表格格式行,即为表格第二行,格式说明(0:左对齐,1:居中,2:右对齐)\n\t\t * @param {String} tStr trim()过的语句字符串\n\t\t * @param {Number} col 表格头部标明了有多少列,如果实际解析出来的没有这么多列,则用0(左对齐)补齐剩下的列\n\t\t * @return {Array|Boolean} 如果此语句是表格格式行则返回解析出来的格式,否则返回false\n\t\t */\n\t\tfunction handlerTbFmt(tStr,col){\n\t\t\tvar r = handlerTbLine(tStr,true);//初步解析表格语句\n\t\t\tvar ret = [];//返回结果\n\t\t\tvar i = 0,tmp = 0;//i:循环变量,tmp:临时变量\n\t\t\tif(r==false)return false;//不是格式行\n\t\t\tfor(var len=r.length;i<len;i++,tmp=0){\n\t\t\t\tif(r[i].length<=1){ret[i] = 0;continue;}//如果格式描述字符串长度为1,则左对齐\n\t\t\t\tif(r[i][r[i].length-1]==':')tmp = (r[i][0]==':')?1:2;//右边有:,右对齐,左边又有:,居中\n\t\t\t\tret[i] = tmp;//存入返回结果\n\t\t\t}\n\t\t\tfor (; i < col; i++)ret[i] = 0;//补齐剩下的列\n\t\t\treturn ret;\n\t\t}\n\t\t/**\n\t\t * @description 解析表格中的行,将一行表格语句分解成一列一列的数组\n\t\t * @param {String} tStr trim()过的语句字符串\n\t\t * @param {Boolean} isFmtL 此行是否应该为格式行,默认false\n\t\t * @return {Array|Boolean} 如果此语句是表格中的行则返回解析出来的每一列组成的数组,\n\t\t * 否则返回false(如果指定为格式行,则若不满足格式行的要求,也会返回false)\n\t\t */\n\t\tfunction handlerTbLine(tStr,isFmtL){\n\t\t\tvar ret = [];//返回结果\n\t\t\tvar len = tStr.length;//语句长度\n\t\t\tvar tmpStr = '';//解析时临时存储用的字符串,此处临时存当前列的数据\n\t\t\tif(isFmtL==undefined)isFmtL = false;//默认不是格式行\n\t\t\tfor(var i=(tStr[0]=='|'?1:0);i<len;i++){//抛弃首个|\n\t\t\t\tswitch(tStr[i]){\n\t\t\t\tcase '\\\\'://转义字符\n\t\t\t\t\tif(isFmtL)return false;//格式行不应该有这个字符\n\t\t\t\t\ttmpStr+='\\\\';\n\t\t\t\t\tif(tStr[i+1]=='|')tmpStr+='|',i++;//转义的|,应该被输出\n\t\t\t\t\tcontinue;\n\t\t\t\tcase '|'://分隔符\n\t\t\t\t\ttmpStr = tmpStr.trim();\n\t\t\t\t\tif(isFmtL && tmpStr.length==0)return false;//格式行不允许列格式字符串为空\n\t\t\t\t\tret.push(tmpStr);//存入返回结果\n\t\t\t\t\ttmpStr = '';\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t//其他字符,如果格式行出现其他字符,则说明不是正常格式行\n\t\t\t\tif(!isFmtL||tStr[i]==':'||tStr[i]=='-'||tStr[i]==' '||tStr[i]=='\\t')tmpStr+=tStr[i];\n\t\t\t\telse return false;\n\t\t\t}\n\t\t\t//没有有效的表格列,证明不是表格\n\t\t\tif(ret.length==0 && tStr[0]!='|')return false;\n\t\t\ttmpStr = tmpStr.trim();\n\t\t\tif(tmpStr.length!=0)ret.push(tmpStr);//保存最后一列的数据\n\t\t\treturn ret;\n\t\t}\n\n\t\t/**\n\t\t * @description 生成指定长度的空格内容字符串\n\t\t * @param {Number} len 指定长度,最长1024\n\t\t */\n\t\tfunction getSpaceString(len){\n\t\t\treturn len <= 0 ? '' : space1024String.slice(0,len);\n\t\t}\t\t\n\n\t\t/**\n\t\t * @description 处理一行Markdown语句(不包括行修饰符, 例如#标题, - 列表...)\n\t\t * @param {String} line 去掉了头部的Markdown语句\n\t\t * @param {Number} start 这个Markdown语句解析的起始点,默认为0\n\t\t */\n\t\tfunction handlerInline(line, start) {\n\t\t\t/*\n\t\t\t结果 = 结果块列表 合并   return rList.join('');\n\t\t\t之所以使用结果块列表, 是因为可以方便的在 某个结果块的尾部插入<strong><em><del>标签\n\t\t\t*/\n\t\t\t\n\t\t\tvar len = line.length; //text的长度\n\t\t\tvar rList = []; //返回结果块列表\n\t\t\tvar r = ''; //返回结果中最新的一条子结果\n\t\t\t//上一次转义了的字符所在结果块列表中的哪一行(或者说当时结果块列表有多少行了),和那行的偏移量\n\t\t\tvar lastMean = -1, lastMeanOffset = -1;\n\t\t\t\n\t\t\t//上一次出现<strong><i><del>分别是在哪个结果块列表的末尾\n\t\t\tvar lastStrong = -1;\n\t\t\tvar lastEm = -1;\n\t\t\tvar lastDel = -1;\n\t\t\t//上一次出现<strong><i>的类型是*还是_\n\t\t\tvar lastStType = '*';\n\t\t\tvar lastEmType = '*';\n\n\t\t\tvar nextLoc; //下一次的位置\n\t\t\tvar linkType; //可链接元素的类型:'s':Sup;'i':Image;'':Link\n\t\t\tvar linkContent, linkURL, linkTitle;\n\n\t\t\tvar tmpString, tmpNumber, tmpObject, tmpBoolean; //临时变量\n\t\t\t\n\t\t\t//遍历语句\n\t\t\tfor (var i = (start || 0); i < len; i++){\n\t\t\t\tswitch(line[i]){\n\t\t\t\tcase '\\\\'://转义字符\\打头\n\t\t\t\t\t//如果\\后面的字符是可转义字符才转义\n\t\t\t\t\tif (specialCharacters.indexOf(line[i + 1]) >= 0)\n\t\t\t\t\t\tlastMean = rList.length,\n\t\t\t\t\t\tlastMeanOffset = ++i; //++i为了移动到下一位\n\t\t\t\t\tr += line[i];\n\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\tcase '`'://行内代码\n\t\t\t\t\ttmpString = (line[i + 1] == '`') ? '``' : '`';\n\t\t\t\t\ttmpNumber = tmpString.length; //tS记录行内代码包裹的标记,tI记录前者长度\t\n\t\t\t\t\tif ((nextLoc = line.indexOf(tmpString, i + tmpNumber)) == -1) r += tmpString; //如果往后找找不到可匹配的结束行内代码的标记,就正常输出\n\t\t\t\t\telse { //找到了,输出行内代码\n\t\t\t\t\t\tr += tag.inlineCode[0] + escapedHTML(line.slice(i + tmpNumber, nextLoc)) + tag.inlineCode[1];\n\t\t\t\t\t\ti = nextLoc;\n\t\t\t\t\t}\n\t\t\t\t\ti += tmpNumber - 1; //移动遍历光标\n\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\tcase '~'://删除线\n\t\t\t\t\tif (line[i + 1] == '~') {//两个~才表示删除线\n\t\t\t\t\t\tif (lastDel >= 0) {//前面出现过一次~~了,这个是收尾\n\t\t\t\t\t\t\tif (r == '') { //表示新的子结果块列表才开始,~~包裹的内容为空,~~~~的情况,保留前面的两个~~\n\t\t\t\t\t\t\t\trList[lastDel] += '~~';\n\t\t\t\t\t\t\t} else { //正常情况,输出删除线的文本\n\t\t\t\t\t\t\t\trList[lastDel] += tag.del[0];\n\t\t\t\t\t\t\t\tr += tag.del[1];\n\t\t\t\t\t\t\t\tlastDel = -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else { //这是第一次出现~~标记,是个打头,记录一下并开启一个新的子结果块列表\n\t\t\t\t\t\t\tlastDel = rList.push(r) - 1;\n\t\t\t\t\t\t\tr = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr += '~';//只是一个普通的波浪线\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase '*':\n\t\t\t\tcase '_'://粗体斜体\n\t\t\t\t\t//Markdown规范,*或_两边空格,则当作正常字符输出\n\t\t\t\t\tif ((line[i + 1] == ' ' || line[i + 1] == '\\t') && (line[i - 1] == ' ' || line[i - 1] == '\\t')) {\n\t\t\t\t\t\tr += line[i]; break;\n\t\t\t\t\t}\n\t\t\t\t\t//两个*或_在一起,表示粗体\n\t\t\t\t\tif(line[i+1]==line[i]){\n\t\t\t\t\t\tif(lastStrong>=0){//这个是收尾\n\t\t\t\t\t\t\tif(lastStType != line[i]){//上次开头的标记字符与本次的不一样,当作正常字符输出\n\t\t\t\t\t\t\t\tr+=line[i++]+line[i];break;\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//一切正常输出加粗内容\n\t\t\t\t\t\t\trList[lastStrong] += tag.strong[0];\n\t\t\t\t\t\t\tr += tag.strong[1]; lastStrong = -1;\n\t\t\t\t\t\t}else{//这是开头\n\t\t\t\t\t\t\tif(line[i+2]==line[i] && line[i+3]==line[i]){//四个连续的*或_,那就不解析前面两个,否则无法出现只想单纯表达四个*的效果\n\t\t\t\t\t\t\t\tr+=line[i++]+line[i++];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlastStrong = rList.push(r) - 1;\n\t\t\t\t\t\t\tr = '';lastStType = line[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}else{//斜体\n\t\t\t\t\t\tif(lastEm>=0){//这个是收尾\n\t\t\t\t\t\t\tif(lastEmType != line[i]){//上次开头的字符与本次的不一样,当作正常字符输出\n\t\t\t\t\t\t\t\tr += line[i]; break;\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//一切正常输出斜体内容\n\t\t\t\t\t\t\trList[lastEm] += tag.em[0];\n\t\t\t\t\t\t\tr += tag.em[1]; lastEm = -1;\n\t\t\t\t\t\t}else{//这是开头\n\t\t\t\t\t\t\tlastEm = rList.push(r) - 1;\n\t\t\t\t\t\t\tr = '';lastEmType = line[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase '>'://有可能是HTML注释结尾\n\t\t\t\t\tif (i >= 2 && line.slice(i - 2, i) == '--') r += '-->'; //HTML注释结尾\n\t\t\t\t\telse r += '>'; //否则当成>字符输出\n\t\t\t\t\tbreak;\n\t\t\t\tcase '<'://可能是自动链接或自动邮箱或者是HTML标签或者干脆就是一个<字符\n\t\t\t\t\tif (line.slice(i + 1, i + 4) == '!--') { r += '<!--'; break; }//考虑一种特殊情况,HTML注释\n\t\t\t\t\ttmpBoolean = 1;//表示有可能是邮箱或URL\n\t\t\t\t\tfor (nextLoc = i + 1; nextLoc < len; nextLoc++){//找到>在哪里\n\t\t\t\t\t\tif (line[nextLoc] == '>') break;\n\t\t\t\t\t\tif (line[nextLoc] == ' ' || line[nextLoc] == '\\t') tmpBoolean = 0;//出现空白字符了,不可能是邮箱或URL了\n\t\t\t\t\t}\n\t\t\t\t\tif (nextLoc >= len) { r += '&lt;'; break; }//都找不到>,那就转义输出吧\n\t\t\t\t\ttmpString = line.slice(i + 1, nextLoc);//选出<>内的内容\n\t\t\t\t\tif (tmpBoolean) {//如果还有可能是 url 或 email\n\t\t\t\t\t\tif (regex_url.test(tmpString)) {//内容是URL\n\t\t\t\t\t\t\tr += tagFunc.link(tmpString, '', tmpString);\n\t\t\t\t\t\t\ti = nextLoc; break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (regex_email.test(tmpString)) {//内容是邮箱\n\t\t\t\t\t\t\tr += tagFunc.email(tmpString);\n\t\t\t\t\t\t\ti = nextLoc;break;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tr+='<'//当作正常字符输出;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '!'://如果不是初判图片才输出\n\t\t\t\t\tif (line[i + 1] != '[') r += '!'; break;\n\t\t\t\tcase '['://进入了可链接(Linkable)元素区块\n\t\t\t\t\t//判断类型\n\t\t\t\t\tif (line[i - 1] == '!' && (lastMean != rList.length || lastMeanOffset != i - 1)) linkType = 'i';//图片\t\n\t\t\t\t\telse if (line[i + 1] == '^') linkType = 's';//脚注型\t\n\t\t\t\t\telse linkType = '';//链接\t\n\t\t\t\t\tvar hadEmbedImg = 0;//是否在遍历的时候发现了内嵌图片的开始标记\n\t\t\t\t\t//循环为了读取到完整的可链接元素信息\n\t\t\t\t\t//done用于判断是否获得完整信息后才结束(即是否成功输出了可链接元素)\n\t\t\t\t\tfor (var j = i + 1, done = 0; j < len; j++){\n\t\t\t\t\t\tswitch (line[j]) {\n\t\t\t\t\t\t//如果是图片模式内部就不能有![,如果是链接模式内部就不能有[\n\t\t\t\t\t\tcase '!':\n\t\t\t\t\t\t\tif (line[j + 1] != '[') break;//仅仅是感叹号\t\n\t\t\t\t\t\t\tif (linkType != '') j = len;//图片模式和脚注模式跳过\n\t\t\t\t\t\t\telse hadEmbedImg = 1, j++;//标记内嵌图片,跳过[\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '`'://跳过代码块\n\t\t\t\t\t\t\ttmpString = (line[j + 1] == '`') ? '``' : '`'; tmpNumber = tmpString.length;\n\t\t\t\t\t\t\tif ((nextLoc = line.indexOf(tmpString, j + tmpNumber)) == -1) j += tmpNumber - 1;\t\n\t\t\t\t\t\t\telse j = nextLoc + tmpNumber - 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '[': j = len; break;//可链接元素内不允许再嵌套一次链接\n\t\t\t\t\t\tcase ']'://找到可链接元素的标题/文本部分结束符了\n\t\t\t\t\t\t\t//先保存标题部分\n\t\t\t\t\t\t\tlinkContent = line.slice(i+1,j);\n\t\t\t\t\t\t\tif(linkType=='s'){//如果是脚注,那就直接输出了\n\t\t\t\t\t\t\t\ttmpObject = footRefManager.get(linkContent);\n\t\t\t\t\t\t\t\tif (tmpObject) {//该脚注信息是否存在\n\t\t\t\t\t\t\t\t\tr += tagFunc.footNoteLink(tmpObject.url, tmpObject.title, tmpObject.id);\n\t\t\t\t\t\t\t\t\tdone = 1; i = j; j = len;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttmpString = line[j + 1];\n\t\t\t\t\t\t\tvar toFind;//可链接元素的结尾符号\n\t\t\t\t\t\t\tif (tmpString == '(') toFind = ')';\n\t\t\t\t\t\t\telse if (tmpString == '[' || (tmpString == ' ' && line[j + 2] == '[')) toFind = ']';\n\t\t\t\t\t\t\telse { j = len; break; }//发现无法匹配格式](或] [,不是可链接元素\n\t\t\t\t\t\t\ttmpNumber = tmpString == ' ' ? j + 3 : j + 2;//查找开始点,截取点\n\t\t\t\t\t\t\tif ((nextLoc = line.indexOf(toFind, tmpNumber)) != -1) {//正常收尾\n\t\t\t\t\t\t\t\t//如果之前有内嵌图片的标记头就跳过这个收尾\n\t\t\t\t\t\t\t\tif (hadEmbedImg) { hadEmbedImg = 0; break; }\n\t\t\t\t\t\t\t\tvar titleableLink = line.slice(tmpNumber,nextLoc).trim();//保存链接内容:链接及链接标题部分\n\t\t\t\t\t\t\t\tif (toFind == ']') {//参考式,则解析成真实链接内容\n\t\t\t\t\t\t\t\t\tif (titleableLink.length == 0) titleableLink = linkContent;//如果留空,则表示参考式名称就是标题文本\n\t\t\t\t\t\t\t\t\ttmpObject = footRefManager.get(titleableLink);\n\t\t\t\t\t\t\t\t\tif (!tmpObject) {\n\t\t\t\t\t\t\t\t\t\tif (!(tmpObject = render._resolveRefLink(titleableLink))) {\n\t\t\t\t\t\t\t\t\t\t\t//该参考式不存在\n\t\t\t\t\t\t\t\t\t\t\tj = len; break;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}else{//行内式解析\n\t\t\t\t\t\t\t\t\ttmpObject = analyzeTitleableLink(titleableLink);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlinkURL = tmpObject.url;linkTitle = tmpObject.title || '';\n\t\t\t\t\t\t\t\tif (linkType == 'i')//输出图片\n\t\t\t\t\t\t\t\t\tr += tagFunc.image(linkURL, linkTitle, linkContent);\n\t\t\t\t\t\t\t\telse//输出链接\n\t\t\t\t\t\t\t\t\tr += tagFunc.link(linkURL, linkTitle, handlerInline(linkContent, 0));\t\n\t\t\t\t\t\t\t\tdone = 1; i = nextLoc;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tj=len;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!done && j >= len) {//没有有效的尾部,当正常字符串输出\n\t\t\t\t\t\tswitch(linkType){\n\t\t\t\t\t\tcase 's': r += '[^'; i++; break;\n\t\t\t\t\t\tcase 'i': r += '!['; break;\n\t\t\t\t\t\tdefault: r += '[';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault://基本字符\n\t\t\t\t\tr+=line[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t//将最后一个子句推入\n\t\t\trList.push(r);\n\t\t\t\n\t\t\t//如果此语句解析完后发现之前有些~_*不是表示粗体斜体或删除线的就正常输出\n\t\t\tif (lastDel != -1) rList[lastDel] += '~~';\n\t\t\tif (lastStrong != -1) rList[lastStrong] += lastStType + lastStType;\n\t\t\tif (lastEm != -1) rList[lastEm] += lastEmType;\n\t\t\t\n\t\t\treturn rList.join('');\n\t\t}\t\t\n\n\n\t\t/**\n\t\t * 生成一个脚注内容的代码\n\t\t * @return {String} 脚注内容的HTML\n\t\t */\n\t\tfunction handlerFoot(){\n\t\t\tvar list = footRefManager.getFootNoteList();\n\t\t\tif (list.length == 0) return '';\n\t\t\tvar res = tag.footNote[0];\n\t\t\tlist.forEach(item => res += tagFunc.footNote(item.url, handlerInline(item.content, 0)));\n\t\t\treturn res + tag.footNote[1];\n\t\t}\n\n\t}/* </ClassMdjs> */\n\n\t//========================\n\t\n\t//Static method\n\tvar mdjsInside = new ClassMdjs();\n\tClassMdjs.md2html = (md, options) =>\n\t\tmdjsInside.md2html(md, options);\n\tClassMdjs.escapedHTML = escapedHTML;\n\tClassMdjs.MdjsRenderer = ClassMdjsRenderer;\n\t\n\tClassMdjs.Mdjs = ClassMdjs;\n\t//Export functions, 导出函数和类\n\tif (typeof module == 'object' && typeof global == 'object')\n\t\tmodule.exports = global.Mdjs = ClassMdjs;\n\tif (typeof window != 'undefined')\n\t\twindow.Mdjs = ClassMdjs;\n})();\n"]}